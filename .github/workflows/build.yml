name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  Linux:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libglfw3-dev libsdl2-dev gcc-multilib g++-multilib libfreetype6-dev

    - name: Get Submodules
      run: git submodule update --init --recursive

    - name: Install Dependencies
      working-directory: ${{github.workspace}}
      run: python ./external/hello_imgui/tools/vcpkg_install_third_parties.py

    - name: Configure CMake
      run: |
        mkdir ${{github.workspace}}/build
        cd ${{github.workspace}}/build
        cmake .. \
              -DCMAKE_TOOLCHAIN_FILE=../external/hello_imgui/vcpkg/scripts/buildsystems/vcpkg.cmake \
              -DHELLOIMGUI_USE_SDL_OPENGL3=ON

    - name: Build for Linux
      working-directory: ${{github.workspace}}/build
      run: make

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.  
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}
    
    - name: Check Linux Product
      working-directory: ${{github.workspace}}/build
      run: |
        ls -l hello assets
        file hello

    - name: Package Linux Product
      working-directory: ${{github.workspace}}/build
      run: |
        chmod +x hello
        zip -r hello-linux.zip hello assets

    - name: Archive Linux Product
      uses: actions/upload-artifact@v1
      with:
        name: hello-linux.zip
        path: build/hello-linux.zip

  MacOS:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Get Submodules
      run: git submodule update --init --recursive

    - name: Install Dependencies
      run: |
        brew install glfw3
        brew install sdl2

    - name: Configure CMake
      run: |
        mkdir ${{github.workspace}}/build
        cd ${{github.workspace}}/build
        cmake .. \
              -DHELLOIMGUI_USE_SDL_OPENGL3=ON

    - name: Build for MacOS
      working-directory: ${{github.workspace}}/build
      run: make

    # Running `find` will show you all the files and folders at this point in the build
    # - run: find ${{github.workspace}}/build

    - name: Check MacOS Product
      working-directory: ${{github.workspace}}/build
      run: |
        ls -l hello assets
        file hello

    - name: Package MacOS Product
      working-directory: ${{github.workspace}}/build
      run: |
        chmod +x hello
        zip -r hello-mac.zip hello assets

    - name: Archive MacOS Product
      uses: actions/upload-artifact@v1
      with:
        name: hello-mac.zip
        path: build/hello-mac.zip

  Emscripten:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libglfw3-dev libsdl2-dev gcc-multilib g++-multilib libfreetype6-dev

    - name: Install Emscripten
      run: |
        wget -q https://github.com/emscripten-core/emsdk/archive/master.tar.gz
        tar -xvf master.tar.gz
        emsdk-master/emsdk update
        emsdk-master/emsdk install latest
        emsdk-master/emsdk activate latest

    - name: Get Submodules
      run: git submodule update --init --recursive

    - name: Configure CMake
      run: |
        source emsdk-master/emsdk_env.sh
        mkdir ${{github.workspace}}/build
        cd ${{github.workspace}}/build
        emcmake cmake .. \
              -DHELLOIMGUI_USE_SDL_OPENGL3=ON

    - name: Build for Emscripten
      run: |
        source emsdk-master/emsdk_env.sh
        cd ${{github.workspace}}/build
        make

    - name: Check Emscripten Product
      working-directory: ${{github.workspace}}/build
      run: |
        ls -l
        file hello.html
        file hello.js
        file hello.data
        file hello.wasm

    - name: Package Emscripten Product
      working-directory: ${{github.workspace}}/build
      run: |
        zip -r hello-web.zip hello.html hello.js hello.data hello.wasm

    - name: Archive Emscripten Product
      uses: actions/upload-artifact@v1
      with:
        name: hello-web.zip
        path: build/hello-web.zip

